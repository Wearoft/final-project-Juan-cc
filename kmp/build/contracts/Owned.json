{
  "contractName": "Owned",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8da5cb5b"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor",
      "signature": "constructor"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "anOwner",
          "type": "address"
        }
      ],
      "name": "modifyOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x40cb3462"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610203806100326000396000f3fe60806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166340cb346281146100505780638da5cb5b14610092575b600080fd5b34801561005c57600080fd5b506100906004803603602081101561007357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100d0565b005b34801561009e57600080fd5b506100a76101bb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600054339073ffffffffffffffffffffffffffffffffffffffff16811461017e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4163636573732064656e6965642e20436f6d70616e79206f776e6572206f6e6c60448201527f792e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b506000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff168156fea165627a7a72305820f48e9bf85af4e8e986a21546c575639c888c4b1fd1cc04501d7051b5bcb723e90029",
  "deployedBytecode": "0x60806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166340cb346281146100505780638da5cb5b14610092575b600080fd5b34801561005c57600080fd5b506100906004803603602081101561007357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100d0565b005b34801561009e57600080fd5b506100a76101bb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600054339073ffffffffffffffffffffffffffffffffffffffff16811461017e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4163636573732064656e6965642e20436f6d70616e79206f776e6572206f6e6c60448201527f792e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b506000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff168156fea165627a7a72305820f48e9bf85af4e8e986a21546c575639c888c4b1fd1cc04501d7051b5bcb723e90029",
  "sourceMap": "445:1043:7:-;;;1137:56;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1168:5:7;:18;;-1:-1:-1;;;;;;1168:18:7;1176:10;1168:18;;;445:1043;;;;;;",
  "deployedSourceMap": "445:1043:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;1386:99;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1386:99:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1386:99:7;;;;;;;493:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;493:20:7;;;;;;;;;;;;;;;;;;;;;;;1386:99;929:5;;1441:10;;929:16;:5;:16;;921:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1463:5:7;:15;;-1:-1:-1;;1463:15:7;;;;;;;;;;;;1386:99::o;493:20::-;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\n/** @author Juan Castellon\n    @title Owned contract will provide functionality to validate ownership.\n    @dev This contract will be used to set the owner of a contract and to \n        validate that only the owner can execute certain action on the Platform.\n        This was created before I realize there was an audited Ownable contract \n        from OpenZeppelin so I may use their implementation in the future. \n */\ncontract Owned {\n    /** State variables */\n    address public owner;\n\n    /** Modifiers */\n    /** @dev This modifier validates that only the owner of the contract can\n            proceed executing this action on the calling contract. \n        @param anOwner address to validate against the state variable owner. If\n            is the owner then can proceed, if it is not the owner then throws\n            an error. \n     */\n    modifier ownerOnly(address anOwner) {\n        require(owner == anOwner, \"Access denied. Company owner only.\");\n        _;\n    }\n\n    /** Constructors */\n    /** @dev Default constructor that will be used to set the owner of the\n            contract.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /** Functions */\n    /** @dev This function will allow the owner of the contract to transfer \n            ownership to a new owner.\n        @param anOwner new owner's address.\n    */\n    function modifyOwner(address anOwner) public ownerOnly(msg.sender) {\n        owner = anOwner;\n    }\n\n}\n",
  "sourcePath": "/home/juan/consensys/final/final-project-Juan-cc/kmp/contracts/Owned.sol",
  "ast": {
    "absolutePath": "/home/juan/consensys/final/final-project-Juan-cc/kmp/contracts/Owned.sol",
    "exportedSymbols": {
      "Owned": [
        1028
      ]
    },
    "id": 1029,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 989,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:7"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@author Juan Castellon\n@title Owned contract will provide functionality to validate ownership.\n@dev This contract will be used to set the owner of a contract and to \nvalidate that only the owner can execute certain action on the Platform.\nThis was created before I realize there was an audited Ownable contract \nfrom OpenZeppelin so I may use their implementation in the future. ",
        "fullyImplemented": true,
        "id": 1028,
        "linearizedBaseContracts": [
          1028
        ],
        "name": "Owned",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 991,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 1028,
            "src": "493:20:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 990,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "493:7:7",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1003,
              "nodeType": "Block",
              "src": "911:91:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 998,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 996,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 991,
                          "src": "929:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 997,
                          "name": "anOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 993,
                          "src": "938:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "929:16:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4163636573732064656e6965642e20436f6d70616e79206f776e6572206f6e6c792e",
                        "id": 999,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "947:36:7",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_89da6cce32d29f363e3c94a27706667440612bc1f94b7e8b319feaa4044c7820",
                          "typeString": "literal_string \"Access denied. Company owner only.\""
                        },
                        "value": "Access denied. Company owner only."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_89da6cce32d29f363e3c94a27706667440612bc1f94b7e8b319feaa4044c7820",
                          "typeString": "literal_string \"Access denied. Company owner only.\""
                        }
                      ],
                      "id": 995,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1694,
                        1695
                      ],
                      "referencedDeclaration": 1695,
                      "src": "921:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1000,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "921:63:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1001,
                  "nodeType": "ExpressionStatement",
                  "src": "921:63:7"
                },
                {
                  "id": 1002,
                  "nodeType": "PlaceholderStatement",
                  "src": "994:1:7"
                }
              ]
            },
            "documentation": "@dev This modifier validates that only the owner of the contract can\nproceed executing this action on the calling contract. \n@param anOwner address to validate against the state variable owner. If\nis the owner then can proceed, if it is not the owner then throws\nan error. ",
            "id": 1004,
            "name": "ownerOnly",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 994,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 993,
                  "name": "anOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1004,
                  "src": "894:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 992,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "894:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "893:17:7"
            },
            "src": "875:127:7",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1012,
              "nodeType": "Block",
              "src": "1158:35:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1010,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1007,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 991,
                      "src": "1168:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1008,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1691,
                        "src": "1176:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1009,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1176:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1168:18:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1011,
                  "nodeType": "ExpressionStatement",
                  "src": "1168:18:7"
                }
              ]
            },
            "documentation": "@dev Default constructor that will be used to set the owner of the\ncontract.",
            "id": 1013,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1005,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1148:2:7"
            },
            "returnParameters": {
              "id": 1006,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1158:0:7"
            },
            "scope": 1028,
            "src": "1137:56:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1026,
              "nodeType": "Block",
              "src": "1453:32:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1024,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1022,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 991,
                      "src": "1463:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1023,
                      "name": "anOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1015,
                      "src": "1471:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1463:15:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1025,
                  "nodeType": "ExpressionStatement",
                  "src": "1463:15:7"
                }
              ]
            },
            "documentation": "@dev This function will allow the owner of the contract to transfer \nownership to a new owner.\n@param anOwner new owner's address.",
            "id": 1027,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 1018,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1691,
                      "src": "1441:3:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1019,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1441:10:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  }
                ],
                "id": 1020,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1017,
                  "name": "ownerOnly",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1004,
                  "src": "1431:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_address_$",
                    "typeString": "modifier (address)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1431:21:7"
              }
            ],
            "name": "modifyOwner",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1016,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1015,
                  "name": "anOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1027,
                  "src": "1407:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1014,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1407:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1406:17:7"
            },
            "returnParameters": {
              "id": 1021,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1453:0:7"
            },
            "scope": 1028,
            "src": "1386:99:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1029,
        "src": "445:1043:7"
      }
    ],
    "src": "0:1489:7"
  },
  "legacyAST": {
    "absolutePath": "/home/juan/consensys/final/final-project-Juan-cc/kmp/contracts/Owned.sol",
    "exportedSymbols": {
      "Owned": [
        1028
      ]
    },
    "id": 1029,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 989,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:7"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@author Juan Castellon\n@title Owned contract will provide functionality to validate ownership.\n@dev This contract will be used to set the owner of a contract and to \nvalidate that only the owner can execute certain action on the Platform.\nThis was created before I realize there was an audited Ownable contract \nfrom OpenZeppelin so I may use their implementation in the future. ",
        "fullyImplemented": true,
        "id": 1028,
        "linearizedBaseContracts": [
          1028
        ],
        "name": "Owned",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 991,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 1028,
            "src": "493:20:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 990,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "493:7:7",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1003,
              "nodeType": "Block",
              "src": "911:91:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 998,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 996,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 991,
                          "src": "929:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 997,
                          "name": "anOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 993,
                          "src": "938:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "929:16:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4163636573732064656e6965642e20436f6d70616e79206f776e6572206f6e6c792e",
                        "id": 999,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "947:36:7",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_89da6cce32d29f363e3c94a27706667440612bc1f94b7e8b319feaa4044c7820",
                          "typeString": "literal_string \"Access denied. Company owner only.\""
                        },
                        "value": "Access denied. Company owner only."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_89da6cce32d29f363e3c94a27706667440612bc1f94b7e8b319feaa4044c7820",
                          "typeString": "literal_string \"Access denied. Company owner only.\""
                        }
                      ],
                      "id": 995,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1694,
                        1695
                      ],
                      "referencedDeclaration": 1695,
                      "src": "921:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1000,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "921:63:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1001,
                  "nodeType": "ExpressionStatement",
                  "src": "921:63:7"
                },
                {
                  "id": 1002,
                  "nodeType": "PlaceholderStatement",
                  "src": "994:1:7"
                }
              ]
            },
            "documentation": "@dev This modifier validates that only the owner of the contract can\nproceed executing this action on the calling contract. \n@param anOwner address to validate against the state variable owner. If\nis the owner then can proceed, if it is not the owner then throws\nan error. ",
            "id": 1004,
            "name": "ownerOnly",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 994,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 993,
                  "name": "anOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1004,
                  "src": "894:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 992,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "894:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "893:17:7"
            },
            "src": "875:127:7",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1012,
              "nodeType": "Block",
              "src": "1158:35:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1010,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1007,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 991,
                      "src": "1168:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1008,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1691,
                        "src": "1176:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1009,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1176:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1168:18:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1011,
                  "nodeType": "ExpressionStatement",
                  "src": "1168:18:7"
                }
              ]
            },
            "documentation": "@dev Default constructor that will be used to set the owner of the\ncontract.",
            "id": 1013,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1005,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1148:2:7"
            },
            "returnParameters": {
              "id": 1006,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1158:0:7"
            },
            "scope": 1028,
            "src": "1137:56:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1026,
              "nodeType": "Block",
              "src": "1453:32:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1024,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1022,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 991,
                      "src": "1463:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1023,
                      "name": "anOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1015,
                      "src": "1471:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1463:15:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1025,
                  "nodeType": "ExpressionStatement",
                  "src": "1463:15:7"
                }
              ]
            },
            "documentation": "@dev This function will allow the owner of the contract to transfer \nownership to a new owner.\n@param anOwner new owner's address.",
            "id": 1027,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 1018,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1691,
                      "src": "1441:3:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1019,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1441:10:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  }
                ],
                "id": 1020,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1017,
                  "name": "ownerOnly",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1004,
                  "src": "1431:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_address_$",
                    "typeString": "modifier (address)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1431:21:7"
              }
            ],
            "name": "modifyOwner",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1016,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1015,
                  "name": "anOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1027,
                  "src": "1407:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1014,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1407:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1406:17:7"
            },
            "returnParameters": {
              "id": 1021,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1453:0:7"
            },
            "scope": 1028,
            "src": "1386:99:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1029,
        "src": "445:1043:7"
      }
    ],
    "src": "0:1489:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {
    "4": {
      "events": {},
      "links": {},
      "address": "0x6b7978958f75D5f004A0f403D8B1A25Dd66cDF2E",
      "transactionHash": "0x49e7a15009385fc8dcd06a3fbe65861a6c1a59b8d7e38aa3bc3acba5f115623d"
    },
    "5777": {
      "events": {},
      "links": {},
      "address": "0xAE4fb7e0C21D0e5b659017a21dC0Af959fa309c2",
      "transactionHash": "0x25238c9ea08b816d8cdbb24bf6ea32e0ae6c4ac52df73e2b4eed25ca8bd63407"
    }
  },
  "schemaVersion": "3.0.0",
  "updatedAt": "2019-01-26T21:19:16.696Z",
  "devdoc": {
    "author": "Juan Castellon",
    "details": "This contract will be used to set the owner of a contract and to  validate that only the owner can execute certain action on the Platform. This was created before I realize there was an audited Ownable contract  from OpenZeppelin so I may use their implementation in the future. ",
    "methods": {
      "constructor": {
        "details": "Default constructor that will be used to set the owner of the contract."
      },
      "modifyOwner(address)": {
        "details": "This function will allow the owner of the contract to transfer  ownership to a new owner.",
        "params": {
          "anOwner": "new owner's address."
        }
      }
    },
    "title": "Owned contract will provide functionality to validate ownership."
  },
  "userdoc": {
    "methods": {}
  }
}